Service:
  RegionId: cn-hangzhou
  DeployType: ros
  DeployMetadata:
    ServiceInstanceNameRule:
      Prefix: bolt
    SupplierDeployMetadata:
      ArtifactRelation:
        'centos_7_9_x64_20G_alibase_20240403.vhd':
          ArtifactId: ${Artifact.EcsImage.ArtifactId}
          ArtifactVersion: ${Artifact.EcsImage.ArtifactVersion}
    TemplateConfigs:
      - Name: 模板1
        Url: 'ros_templates/template.yaml'
  ServiceType: private
  ServiceInfo:
    Locale: zh-CN
    ShortDescription: bolt.diy
    Image: 'resources/icons/service_logo.png'
Artifact:
  EcsImage:
    ArtifactType: EcsImage
    ArtifactName: bolt.diy
    Description: bolt.diy
    ArtifactProperty:
      RegionId: ${ImageBuilder.EcsImage.RegionId}
      ImageId: ${ImageBuilder.EcsImage.SourceImageId}
ImageBuilder:
  EcsImage:
    RegionId: ap-southeast-1
    SystemDiskSize: 20
    SourceImageId: aliyun_3_x64_20G_alibase_20240819.vhd
    InstanceType: ecs.c6.large
    InternetMaxBandwidthOut: 10
    CommandType: RunShellScript
    Timeout: 10800
    Tags: [ ]
    CommandContent: |-
      #!/bin/bash
      # 升级基础组件：
      yum check-update
      yum -y upgrade --security
      yum -y upgrade-minimal
  
      # 安装docker-ce
      yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
      yum makecache
      yum install -y curl git docker-ce
      mkdir -p /etc/docker/
      echo '{
         "default-address-pools": [
             {
                 "base": "10.255.0.0/16",
                 "size": 24
             }
         ]
      }' > /etc/docker/daemon.json
      
      prefixChinaRegion="cn-"
        region=$(curl -s http://100.100.100.200/latest/meta-data/region-id)

        if [[ ${region} == ${prefixChinaRegion}* && ${region} != "cn-hongkong" ]]; then
          echo '{
              "default-address-pools": [
                  {
                      "base": "10.255.0.0/16",
                      "size": 24
                  }
              ],
              "registry-mirrors": [
                  "https://mirrors-ssl.aliyuncs.com/"
              ]
          }' > /etc/docker/daemon.json
        fi

        sudo systemctl enable --now docker.socket
        sudo systemctl enable --now docker.service
      
      # Download and install nvm:
      curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.2/install.sh | bash
      # in lieu of restarting the shell
      \. "$HOME/.nvm/nvm.sh"
      # Download and install Node.js:
      nvm install 22
      # Verify the Node.js version:
      node -v # Should print "v22.14.0".
      nvm current # Should print "v22.14.0".
      # Verify npm version:
      npm -v # Should print "10.9.2".
  
      cd /root/
      git clone -b stable https://github.com/stackblitz-labs/bolt.diy
      cd bolt.diy
      mv .env.example .env.local
      docker build . --target bolt-ai-development